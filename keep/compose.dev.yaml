services:
  web:
    container_name: web
    build:
      context: ..
      dockerfile: ../Dockerfile.dev
    working_dir: /project
    ports:
      - "3000:3000"
      - "9229:9229"
      - "9230:9230"
    volumes:
      - .:/project:cached # Source code with performance optimization
      - node_modules:/project/node_modules:delegated # Named volume for node_modules
      - pnpm-store:/pnpm/store:delegated # Named volume for pnpm store
    env_file:
      - .env.development
    entrypoint: ["/bin/sh", "/project/entrypoint-development.sh"]
    command: ["pnpm", "dev"]
    depends_on:
      db:
        condition: service_healthy
    user: "node"
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # --- E2E web service (uses test dB, but NODE_ENV=development for Next.js) ---
  web-e2e:
    container_name: web-e2e
    build:
      context: ..
      dockerfile: ../Dockerfile.dev
    working_dir: /project
    ports:
      - "3001:3000" # Avoid port clash with dev web
    volumes:
      - .:/project:cached
      - node_modules:/project/node_modules:delegated
      - pnpm-store:/pnpm/store:delegated
    env_file:
      - .env.development
    environment:
      # Optionally, add a custom variable to distinguish test env
      E2E: "true"
    entrypoint: ["/bin/sh", "/project/entrypoint-development.sh"]
    command: ["pnpm", "dev"]
    depends_on:
      testDB:
        condition: service_healthy
    user: "node"
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles: ["e2e"]

  # --- Component web service ---
  web-component:
    container_name: web-component
    build:
      context: ..
      dockerfile: ../Dockerfile.dev
    working_dir: /project
    ports:
      - "3001:3000" # Avoid port clash with dev web
    volumes:
      - .:/project:cached
      - node_modules:/project/node_modules:delegated
      - pnpm-store:/pnpm/store:delegated
    env_file:
      - .env.development
    # environment:
      # Optionally, add a custom variable to distinguish test env
      # E2E: "true"
    entrypoint: ["/bin/sh", "/project/entrypoint-development.sh"]
    command: ["pnpm", "dev"]
    depends_on:
      testDB:
        condition: service_healthy
    user: "node"
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles: ["component"]

  db:
    container_name: db
    image: postgres:latest
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Host port 5432 -> Container port 5432
    env_file:
      - .env.development
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dashboard-network

  testDB:
    container_name: testDB
    image: postgres:latest
    volumes:
      - testDB-data:/var/lib/postgresql/data
    ports:
      - "5433:5432" # Host port 5433 -> Container port 5432
    env_file:
      - .env.development
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dashboard-network

  cypress:
    container_name: cypress
    image: cypress/included:14.3.3 # Match your Cypress version
    working_dir: /e2e
    volumes:
      - .:/e2e
      - node_modules:/e2e/node_modules
    env_file:
      - .env.development
    environment:
      CYPRESS_baseUrl: http://web-e2e:3000
    depends_on:
      web-e2e:
        condition: service_healthy
      testDB:
        condition: service_healthy
      adminer:
        condition: service_healthy
    networks:
      - dashboard-network
    entrypoint: ["/bin/sh", "-c"]
    command: ["npx cypress run --e2e --spec cypress/e2e/auth/signup.cy.ts"]
    profiles: ["e2e"]

    # run with
    # docker compose -f compose.dev.yaml --profile e2e up --build web-e2e cypress

  componentCypress:
    container_name: component
    image: cypress/included:14.3.3 # Match your Cypress version
    working_dir: /component
    volumes:
      - .:/component
      - node_modules:/component/node_modules
    env_file:
      - .env.development
    environment:
      CYPRESS_baseUrl: http://web-component:3000
    depends_on:
      web-component:
        condition: service_healthy
      testDB:
        condition: service_healthy
      adminer:
        condition: service_healthy
    networks:
      - dashboard-network
    entrypoint: ["/bin/sh", "-c"]
    command: ["npx cypress run --component --spec cypress/component/auth-submit-button.cy.tsx"]
    profiles: ["component"]

      # run with
      # docker compose -f compose.dev.yaml --profile component up --build web-component componentCypress

  adminer:
    container_name: adminer
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
      ADMINER_DESIGN: flat
    networks:
      - dashboard-network
    depends_on:
      - db
      - testDB
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  db-data:
  testDB-data:
  node_modules:
  pnpm-store:

# secrets:
#   session_secret:
#     file: ./secrets/session_secret.txt
#   postgres_password:
#     file: ./secrets/postgres_password.txt
#   postgres_url:
#     file: ./secrets/postgres_url.txt
#   postgres_testdb_url:
#     file: ./secrets/postgres_testdb_url.txt
#   postgres_testdb_password:
#     file: ./secrets/postgres_testdb_password.txt

networks:
  dashboard-network:

# Example connection URLs:

# From host:
#   db:     postgres://user:password@localhost:5432/database
#   testDB: postgres://user:password@localhost:5433/database

# From another container:
#   db:     postgres://user:password@db:5432/database
#   testDB: postgres://user:password@testDB:5432/database

# NOTE:
# - Use postgres://user:password@db:5432/database for services running inside Docker (e.g., web service).
# - Use postgres://user:password@localhost:5432/database for local development outside Docker.
# - Set your Docker secrets accordingly for each environment.

# TIP:
# Always run Drizzle schema/migration commands inside the 'web' container
# to ensure correct database connectivity (use: db as hostname).
