services:
  web-app:
    container_name: web-app
    build:
      context: .
      dockerfile: dev.Dockerfile
      args:
        CACHEBUST: ${CACHEBUST:-1}
    depends_on:
      db:
        condition: service_healthy
    # Set environment variables directly in the compose file
    environment:
      #      ENV_VARIABLE: ${ENV_VARIABLE}
      #      NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}
      DATABASE_URL: postgresql://postgres:postgres@db:5432/postgres
    # Set environment variables based on the .env file
    #    env_file:
    #      - .env
    volumes:
      - ./src:/project/src
      - ./public:/project/public
    restart: unless-stopped
    ports:
      #      - "3000:3000"
      - "${WEB_PORT:-3000}:3000"
    networks:
      - my_network
    profiles: ["dev", "test"]

  # Add more containers below (nginx, postgres, etc.)
  db:
    image: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      #      - "5432:5432"
      - "${DB_PORT:-5432}:5432"
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["dev", "test"]
volumes:
  db-data:
# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  my_network:
    name: my_network