services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    working_dir: /project
    ports:
      - "3000:3000"
      - "9229:9229"
      - "9230:9230"
    volumes:
      - .:/project:cached # Source code with performance optimization
      - node_modules:/project/node_modules:delegated # Named volume for node_modules
      - pnpm-store:/pnpm/store:delegated # Named volume for pnpm store
    environment:
      NODE_ENV: development
      #      NODE_OPTIONS: --inspect=0.0.0.0:9229
      SESSION_SECRET_FILE: /run/secrets/session_secret
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_URL_FILE: /run/secrets/postgres_url
      POSTGRES_TESTDB_URL_FILE: /run/secrets/postgres_testdb_url
      NEXT_TELEMETRY_DISABLED: 1
    entrypoint: ["/bin/sh", "/project/entrypoint.sh"]
    command: ["pnpm", "dev"]
    depends_on:
      db:
        condition: service_healthy
    user: "node"
    secrets:
      - session_secret
      - postgres_password
      - postgres_testdb_url
      - postgres_url
    networks:
      - dashboard-network

  db:
    image: postgres:latest
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Host port 5432 -> Container port 5432
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    secrets:
      - postgres_password
    networks:
      - dashboard-network

  testDB:
    image: postgres:latest
    volumes:
      - testDB-data:/var/lib/postgresql/data
    ports:
      - "5433:5432" # Host port 5433 -> Container port 5432
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_testdb_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    secrets:
      - postgres_testdb_password
    networks:
      - dashboard-network

  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
      ADMINER_DESIGN: flat
    networks:
      - dashboard-network
    depends_on:
      - db

volumes:
  db-data:
  testDB-data:
  node_modules:
  pnpm-store:

secrets:
  session_secret:
    file: ./secrets/session_secret.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
  postgres_url:
    file: ./secrets/postgres_url.txt
  postgres_testdb_url:
    file: ./secrets/postgres_testdb_url.txt
  postgres_testdb_password:
    file: ./secrets/postgres_testdb_password.txt

networks:
  dashboard-network:

# Example connection URLs:

# From host:
#   db:     postgres://user:password@localhost:5432/database
#   testDB: postgres://user:password@localhost:5433/database

# From another container:
#   db:     postgres://user:password@db:5432/database
#   testDB: postgres://user:password@testDB:5432/database

# NOTE:
# - Use postgres://user:password@db:5432/database for services running inside Docker (e.g., web service).
# - Use postgres://user:password@localhost:5432/database for local development outside Docker.
# - Set your Docker secrets accordingly for each environment.

# TIP:
# Always run Drizzle schema/migration commands inside the 'web' container
# to ensure correct database connectivity (use: db as hostname).
