import type { InvoiceStatus } from "@/features/invoices/invoice.types";

/**
 * Data Transfer Object for an invoice.
 * Uses PLAIN types only - for API communication.
 */
export interface InvoiceDto {
  readonly id: string; // Plain string
  readonly amount: number; // cents
  readonly customerId: string; // Plain string
  readonly date: string;
  readonly sensitiveData: string;
  readonly status: InvoiceStatus;
}

/**
 * Data Transfer Object (DTO) for creating a new invoice.
 * Used in API requests to create an invoice.
 * All fields are required except for `id`, which is generated by the database.
 * @exclude `id` as it is generated by the database.
 */
export interface CreateInvoiceDto {
  readonly amount: number; // cents
  readonly customerId: string; // Plain string
  readonly date: string;
  readonly sensitiveData: string;
  readonly status: InvoiceStatus;
}

/**
 * Data Transfer Object (DTO) for updating an invoice.
 * Used in API requests to update an invoice.
 * All UI form fields are optional.
 */
export interface UpdateInvoiceDto {
  readonly amount?: number; // cents
  readonly customerId?: string; // Plain string
  readonly date?: string;
  readonly sensitiveData?: string;
  readonly status?: InvoiceStatus;
}

/**
 * Separate form inputs - no ID confusion
 * @exclude `id` as it is created by the database and not part of the form. `id` is passed in the URL for updates.
 */
export interface InvoiceFormInput {
  readonly amount: number; // dollars (UI format)
  readonly customerId: string;
  readonly date: string;
  readonly sensitiveData: string;
  readonly status: "pending" | "paid";
}
