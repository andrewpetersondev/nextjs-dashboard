import "server-only";

import type {
  CreateInvoiceEntity,
  InvoiceEntity,
} from "@/db/models/invoice.entity";
import type { InvoiceRawDrizzle } from "@/db/schema";
import {
  toInvoiceId,
  toInvoiceStatus,
} from "@/features/invoices/invoice.brands";
import type {
  InvoiceDto,
  InvoiceFormDto,
} from "@/features/invoices/invoice.dto";
import { toCustomerId } from "@/lib/definitions/brands";

/**
 * Maps raw database row to branded Entity.
 */
export function rawDbToInvoiceEntity(row: InvoiceRawDrizzle): InvoiceEntity {
  return {
    amount: row.amount,
    customerId: toCustomerId(row.customerId),
    date: row.date,
    id: toInvoiceId(row.id),
    sensitiveData: row.sensitiveData,
    status: toInvoiceStatus(row.status),
  };
}

/**
 * Maps branded Entity to plain DTO.
 * Strips ALL branding for service/API layer.
 */
export function entityToInvoiceDto(entity: InvoiceEntity): InvoiceDto {
  return {
    amount: entity.amount, // Keep in cents
    customerId: String(entity.customerId), // Strip branding
    date: entity.date,
    id: String(entity.id), // Strip branding
    sensitiveData: entity.sensitiveData,
    status: entity.status, // InvoiceStatus is not branded
  };
}

/**
 * Maps plain InvoiceFormDto to branded CreateInvoiceEntity.
 * Applies branding for database layer.
 * @exclude
 * Excludes `id` since IDs are generated by the database.
 */
export function dtoToCreateInvoiceEntity(
  dto: InvoiceFormDto,
): CreateInvoiceEntity {
  return {
    amount: dto.amount, // Already in cents from service layer
    customerId: toCustomerId(dto.customerId), // Apply branding
    date: dto.date,
    sensitiveData: dto.sensitiveData,
    status: toInvoiceStatus(dto.status), // Apply branding
  };
}

/**
 * Maps a partial InvoiceFormDto to a partial branded CreateInvoiceEntity.
 * Ensures exact optional property types for strict TypeScript settings.
 * @param dto - Partial DTO from service layer
 * @returns Partial branded entity for DAL
 */
export function partialDtoToCreateInvoiceEntity(
  dto: Partial<InvoiceFormDto>,
): Partial<InvoiceEntity> {
  const result: Partial<InvoiceEntity> = {
    ...(dto.amount !== undefined && { amount: dto.amount }),
    ...(dto.customerId !== undefined && {
      customerId: toCustomerId(dto.customerId),
    }),
    ...(dto.date !== undefined && { date: dto.date }),
    ...(dto.sensitiveData !== undefined && {
      sensitiveData: dto.sensitiveData,
    }),
    ...(dto.status !== undefined && { status: toInvoiceStatus(dto.status) }),
  };

  return result;
}
