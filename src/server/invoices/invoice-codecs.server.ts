/**
 * @file
 * Codec functions for the Invoice domain model.
 * - These functions specify how to cross the domain boundary.
 */

import "server-only";

import { toInvoiceStatus } from "@/features/invoices/mappers";
import type {
  InvoiceEntity,
  InvoiceFormEntity,
} from "@/server/invoices/entity";
import { toCustomerId } from "@/shared/brands/mappers";
import type {
  InvoiceDto,
  InvoiceFormDto,
  ISODateString,
} from "@/shared/invoices/dto";
import {
  toISODateString,
  toPeriodFirstDayString,
} from "@/shared/invoices/invoice-codecs.transport";

/**
 * Maps branded Entity to plain DTO.
 * Strips ALL branding for service/API layer.
 * Transport guarantees:
 * - amount is cents (integer)
 * - date is YYYY-MM-DD
 * - revenuePeriod is YYYY-MM-01 (first-of-month date)
 */
export function entityToInvoiceDto(entity: InvoiceEntity): InvoiceDto {
  const isoDate = toISODateString(entity.date); // YYYY-MM-DD
  const periodAsFirstDay = toPeriodFirstDayString(entity.revenuePeriod); // YYYY-MM-01

  return {
    amount: entity.amount,
    customerId: String(entity.customerId),
    date: isoDate,
    id: String(entity.id),
    revenuePeriod: periodAsFirstDay,
    sensitiveData: entity.sensitiveData,
    status: entity.status,
  };
}

/**
 * Maps plain InvoiceFormDto to branded InvoiceFormEntity.
 * Input date expected as YYYY-MM-DD; server normalizes to Date.
 * Applies branding for database layer.
 * @exclude
 * Excludes `id` since IDs are generated by the database.
 * @exclude
 * Excludes `revenuePeriod` since it is derived.
 * @param dto - `InvoiceFormDto` from service layer
 */
export function dtoToCreateInvoiceEntity(
  dto: InvoiceFormDto,
): InvoiceFormEntity {
  return {
    amount: dto.amount,
    customerId: toCustomerId(dto.customerId),
    date: new Date(dto.date as ISODateString), // YYYY-MM-DD â†’ Date (UTC midnight)
    sensitiveData: dto.sensitiveData,
    status: toInvoiceStatus(dto.status),
  };
}

/**
 * Maps a partial InvoiceFormDto to a partial branded InvoiceFormEntity.
 * @param dto - Partial DTO from service layer
 * @returns Partial form entity for DAL
 */
export function partialDtoToCreateInvoiceEntity(
  dto: Partial<InvoiceFormDto>,
): Partial<InvoiceFormEntity> {
  return {
    ...(dto.amount !== undefined && { amount: dto.amount }),
    ...(dto.customerId !== undefined && {
      customerId: toCustomerId(dto.customerId),
    }),
    ...(dto.date !== undefined && {
      date: new Date(dto.date as ISODateString),
    }),
    ...(dto.sensitiveData !== undefined && {
      sensitiveData: dto.sensitiveData,
    }),
    ...(dto.status !== undefined && { status: toInvoiceStatus(dto.status) }),
  };
}
