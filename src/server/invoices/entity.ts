import "server-only";

import type { InvoiceStatus } from "@/features/invoices/types";
import type {
  CustomerId,
  InvoiceId,
  Period,
} from "@/shared/brands/domain-brands";

/**
 * Domain model for Invoice.
 * Used for database and server logic.
 * All fields are strictly typed and immutable.
 * @remarks
 * Contains `id` as it represents the primary key in the database.
 */
export interface InvoiceEntity {
  readonly amount: number;
  readonly customerId: CustomerId;
  readonly date: Date;
  readonly id: InvoiceId;
  readonly revenuePeriod: Period;
  readonly sensitiveData: string;
  readonly status: InvoiceStatus;
}

/**
 * Domain model for Invoice without the `id` field.
 * @layer Used in service layer where the ID is not needed.
 * All fields are strictly typed and immutable.
 * @exclude
 * Excludes `id` as it is generated by the database.
 */
export type InvoiceServiceEntity = Omit<InvoiceEntity, "id">;

/**
 * Domain model for creating a new invoice.
 * Boundary model for form submissions or API requests.
 *
 * All fields are strictly typed and immutable.
 * @exclude `id` as it is generated by the database.
 * @exclude `revenuePeriod` as it is derived from `date`.
 */
export type InvoiceFormEntity = Omit<InvoiceEntity, "id" | "revenuePeriod">;

/**
 * Partial domain model for updating an invoice.
 * All fields are optional to allow partial updates.
 * Used in update operations where not all fields need to be provided.
 */
export type InvoiceFormPartialEntity = Partial<InvoiceFormEntity>;
